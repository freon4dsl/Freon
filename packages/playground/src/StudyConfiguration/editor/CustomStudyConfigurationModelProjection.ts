// Generated by the Freon Language Generator.
import {
    FreNode,
    Box,
    GridCellBox,
    LabelBox,
    SvgBox,
    GridBox,
    createDefaultExpressionBox,
    ActionBox,
    FreLanguage,
    FRE_BINARY_EXPRESSION_LEFT,
    FRE_BINARY_EXPRESSION_RIGHT,
    HorizontalListBox, FreProjection, FreTableDefinition, TableRowBox, HorizontalLayoutBox, MultiLineTextBox, BoxFactory, BoxUtil
} from "@freon4dsl/core";
import { NoteOrDescription } from "../language/gen/";

/**
 * Class CustomStudyConfigurationModelProjection provides an entry point for the language engineer to
 * define custom build additions to the editor.
 * These are merged with the custom build additions and other definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on one of the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */
export class CustomStudyConfigurationModelProjection implements FreProjection {
    name: string = "Manual";
     // add your custom methods here

    nodeTypeToBoxMethod: Map<string, (node: FreNode) => Box> = new Map<string, (node: FreNode) => Box>([
        ["NoteOrDescription", this.createNoteOrDescription]
    ]);

    nodeTypeToTableDefinition: Map<string, () => FreTableDefinition> = new Map<string, () => FreTableDefinition>([
        // register your custom table definition methods here
        // ['NAME_OF_CONCEPT', this.TABLE_DEFINITION_FOR_CONCEPT],
    ]);

    getTableHeadersFor(projectionName: string): TableRowBox {
        return null;
    }

    ////////////////////////////////////////////////////////////////////

    createNoteOrDescription (doc: NoteOrDescription): Box {
        return BoxFactory.horizontalLayout(
            doc,
            "NoteOrDescription-hlist-line-0",
            "",
            [
                // BoxUtil.labelBox(doc, "", "top-1-line-0-item-0"),
                // BoxUtil.textBox(this._element as Documentation, "text"),
                new MultiLineTextBox(doc, "study-part-NoteOrDescription",
                    () => { return doc.text},
                    (t: string) => { doc.text = t}
                ),
                // BoxUtil.labelBox(doc, ":end doc", "top-1-line-0-item-2")
            ],
            { selectable: false }
        );
    }
    
}
