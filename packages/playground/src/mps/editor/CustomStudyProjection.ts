// Generated by the ProjectIt Language Generator.
import {
    PiProjection,
    PiElement,
    Box,
    createDefaultExpressionBox,
    TextBox,
    KeyPressAction,
    GridCell, styleToCSS, GridBox, PiProjectionUtil, BoxFactory, GridUtil, PiEditor
} from "@projectit/core";
import {
    Accenture_study_core_Field,
    Accenture_study_core_Form,
    Org_iets3_core_expr_simpleTypes_NumberLiteral
} from "../../mps/language/gen";
import { attributeHeader, entityBoxStyle, entityNameStyle } from "./styles/CustomStyles";
import { StudyEnvironment } from "../environment/gen/StudyEnvironment";
import { mycell, mygrid } from "./styles/styles";

/**
 * Class CustomStudyProjection provides an entry point for the language engineer to
 * define custom build additions to the editor.
 * These custom build additions are merged with the default and definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */

export class CustomStudyProjection implements PiProjection {
    rootProjection: PiProjection;
    name: string = "manual";

    constructor(name?: string) {
        if (!!name) {
            this.name = name;
        }
    }

    getBox(element: PiElement): Box {
        // Add any handmade projections of your own before next statement
        if (element instanceof Org_iets3_core_expr_simpleTypes_NumberLiteral) {
            return this.getDemoNumberLiteralExpressionBox(element);
        }
        if (element instanceof Accenture_study_core_Form) {
            return this.createFormTable(element);
        }
        return null;
    }


    public getDemoNumberLiteralExpressionBox(exp: Org_iets3_core_expr_simpleTypes_NumberLiteral): Box {
        return createDefaultExpressionBox(exp, "number-literal", [
            new TextBox(exp, "NumberLiteralExpression-value", () => exp.value.toString(), (v: string) => (exp.value = v /*Number.parseInt(v)*/), {
                deleteWhenEmpty: true,
                // style: projectitStyles.stringLiteral,
                keyPressAction: (currentText: string, key: string, index: number) => {
                    return isNumber(currentText, key, index);
                }
            })
        ]);
    }

    // private createFromTable(form: Accenture_study_core_Form): Box {
    //     const proj = this.rootProjection;
    //     let cells: GridCell[] = [];
    //     cells.push({ row: 1, column: 1, columnSpan: 1, box: BoxFactory.label(form, "form-label", "Title") });
    //     cells.push({ row: 1, column: 2, columnSpan: 1, box: BoxFactory.label(form, "form-name", "Name") });
    //     cells.push({ row: 1, column: 3, columnSpan: 1, box: BoxFactory.label(form, "form-condition", "Condition") });
    //     cells.push({ row: 1, column: 4, columnSpan: 1, box: BoxFactory.label(form, "form-widget", "Widget") });
    //     cells.push({ row: 1, column: 5, columnSpan: 1, box: BoxFactory.label(form, "form-branch", "Branch") });
    //
    //     form.fields.forEach( (field: Accenture_study_core_Field, index: number) => {
    //         cells.push({ row: index + 2, column: 1, columnSpan: 1, box: PiProjectionUtil.textBox(field, "label") });
    //         cells.push({ row: index + 2, column: 2, columnSpan: 1, box: PiProjectionUtil.textBox(field, "optionalName") });
    //         cells.push({ row: index + 2, column: 3, columnSpan: 1, box: proj.getBox(field.validationCondition)});
    //         cells.push({ row: index + 2, column: 4, columnSpan: 1, box: proj.getBox(field.widget) });
    //         cells.push({ row: index + 2, column: 5, columnSpan: 1, box: proj.getBox(field.branch) });
    //     } );
    //     return new GridBox(form, "form-all", cells, {
    //         style: styleToCSS(entityBoxStyle)
    //     });
    // }

    private createFormTable(form: Accenture_study_core_Form): Box {
        return BoxFactory.verticalList(form, "form-overall", [
            BoxFactory.horizontalList(form, "form-header", [
                BoxFactory.label(form, "form-header-spacing", " "),
                BoxFactory.label(form, "form-header-label", "Form"),
                BoxFactory.text(form, "form-header-name", () => form.name, (value: string) => form.name = value)
            ]),
            BoxFactory.indent(form, "form-indent-fields", 2, this.createFormTable2(form))
        ])
    }

    private createFormTable2(form: Accenture_study_core_Form): Box {
        const proj = this.rootProjection;
        return GridUtil.createCollectionRowGrid<Accenture_study_core_Field>(
            form,
            "form-grid",
            "fields",
            form.fields,
            ["Title", "Name", "Widget", "Branch"],
            [attributeHeader, attributeHeader, attributeHeader, attributeHeader],
            [mycell, mycell, mycell, mycell],
            [
                (field: Accenture_study_core_Field) => { return PiProjectionUtil.textBox(field, "name"); },
                (field: Accenture_study_core_Field) => { return PiProjectionUtil.textBox(field, "optionalName"); },
                (field: Accenture_study_core_Field) => {
                        if (!!field.widget) {
                            return proj.getBox(field.widget);
                        } else {
                            return BoxFactory.alias(field, "Accenture_study_core_Field-widget", "[widget]", {
                                         propertyName: "widget"
                                    });
                        }
                    },
                (field: Accenture_study_core_Field) => {
                    if (!!field.branch) {
                        return proj.getBox(field.branch);
                    } else {
                        return BoxFactory.alias(field, "Accenture_study_core_Field-branch", "[branch]", {
                            propertyName: "branch"
                        });
                    }
                },
            ],
            (box: Box, editor: PiEditor) => {
                return new Accenture_study_core_Field();
            } ,
            StudyEnvironment.getInstance().editor,
            { style:styleToCSS(mygrid)}
        );
    }


}

function isNumber(currentText: string, key: string, index: number): KeyPressAction {
    if (isNaN(Number(key))) {
        if (index === currentText.length) {
            return KeyPressAction.GOTO_NEXT;
        } else if (index === 0) {
            return KeyPressAction.GOTO_PREVIOUS;
        } else {
            return KeyPressAction.NOT_OK;
        }
    } else {
        return KeyPressAction.OK;
    }
}
