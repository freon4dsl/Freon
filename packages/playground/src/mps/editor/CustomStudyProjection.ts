// Generated by the ProjectIt Language Generator.
import {
    PiProjection,
    PiElement,
    Box,
    createDefaultExpressionBox,
    TextBox,
    KeyPressAction,
    GridCell, styleToCSS, GridBox, PiProjectionUtil, BoxFactory, GridUtil, PiEditor, AliasBox
} from "@projectit/core";
import {
    Accenture_study_base_Codelist, Accenture_study_base_CodelistEntry, Accenture_study_core_BranchExpression,
    Accenture_study_core_Field,
    Accenture_study_core_Form, Org_iets3_core_expr_base_AlternativesExpression, Org_iets3_core_expr_base_AltOption,
    Org_iets3_core_expr_simpleTypes_NumberLiteral
} from "../../mps/language/gen";
import { altcell, attributeHeader } from "./styles/CustomStyles";
import { StudyEnvironment } from "../environment/gen/StudyEnvironment";
import { mycell } from "./styles/CustomStyles";

/**
 * Class CustomStudyProjection provides an entry point for the language engineer to
 * define custom build additions to the editor.
 * These custom build additions are merged with the default and definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */

export class CustomStudyProjection implements PiProjection {
    rootProjection: PiProjection;
    name: string = "manual";

    constructor(name?: string) {
        if (!!name) {
            this.name = name;
        }
    }

    getBox(element: PiElement): Box {
        // Add any handmade projections of your own before next statement
        if (element instanceof Org_iets3_core_expr_simpleTypes_NumberLiteral) {
            return this.getDemoNumberLiteralExpressionBox(element);
        }
        if (element instanceof Accenture_study_core_Form) {
            return this.createFormTable(element);
        }
        if (element instanceof Accenture_study_base_Codelist) {
            return this.getCodelistBox(element);
        }
        if (element instanceof Org_iets3_core_expr_base_AlternativesExpression) {
            return this.getAlternativesBox(element);
        }
        if (element instanceof Accenture_study_core_BranchExpression){
            return this.getBranchBox(element);
        }
        return null;
    }

    private getCodelistBox(codelist: Accenture_study_base_Codelist) : Box {
        return GridUtil.createCollectionRowGrid(
            codelist,
            "codelist-grid",
            "entries",
            codelist.entries,
            [],
            [mycell, mycell],
            [mycell, mycell],
            [
                (entry: Accenture_study_base_CodelistEntry) => {
                    if (!!entry.value) {
                        return this.rootProjection.getBox(entry.value);
                    } else {
                      return new AliasBox(entry, "Accenture_study_base_CodelistEntry-value",
                          "[entry]", {
                            propertyName: "value"
                        });
                    }
                },
                (entry: Accenture_study_base_CodelistEntry) => { return PiProjectionUtil.textBox(entry, "label"); }
            ],
            "Accenture_study_base_CodelistEntry",
            "<add entry>",
            StudyEnvironment.getInstance().editor,
        )
    }

    private getBranchBox(branch: Accenture_study_core_BranchExpression): Box {
        return BoxFactory.horizontalList(branch, "branch-all", [
            BoxFactory.label(branch, "branch-label", "branch"),
            this.rootProjection.getBox(branch.targetField)
        ]);
    }
    private getAlternativesBox(alt: Org_iets3_core_expr_base_AlternativesExpression) : Box {
        const options = GridUtil.createCollectionRowGrid(
            alt,
            "alternatives-grid",
            "alternatives",
            alt.alternatives,
            [],
            [altcell, altcell],
            [altcell, altcell],
            [
                (option: Org_iets3_core_expr_base_AltOption) => {
                    if (!!option.when) {
                        return this.rootProjection.getBox(option.when);
                    } else {
                        return new AliasBox(option, "Org_iets3_core_expr_base_AltOption-when",
                            "<when>", {
                                propertyName: "when"
                            });
                    }
                },
                (option: Org_iets3_core_expr_base_AltOption) => { return BoxFactory.label(option, "arrow", "=>"); },
                (option: Org_iets3_core_expr_base_AltOption) => {
                    if (!!option.then) {
                        return this.rootProjection.getBox(option.then);
                    } else {
                        return new AliasBox(option, "Org_iets3_core_expr_base_AltOption-then",
                            "<then>", {
                                propertyName: "then"
                            });
                    }
                },
            ],
            "Org_iets3_core_expr_base_AltOption",
            "<add alternative>",
            StudyEnvironment.getInstance().editor,
        );
        return BoxFactory.horizontalList(alt, "alt-all", [
            BoxFactory.label(alt, "alt-label", "alt"),
            options
        ]);
    }
    public getDemoNumberLiteralExpressionBox(exp: Org_iets3_core_expr_simpleTypes_NumberLiteral): Box {
        return createDefaultExpressionBox(exp, "number-literal", [
            new TextBox(exp, "NumberLiteralExpression-value", () => exp.value.toString(), (v: string) => (exp.value = v /*Number.parseInt(v)*/), {
                deleteWhenEmpty: true,
                keyPressAction: (currentText: string, key: string, index: number) => {
                    return isNumber(currentText, key, index);
                }
            })
        ]);
    }

    private createFormTable(form: Accenture_study_core_Form): Box {
        return BoxFactory.verticalList(form, "form-overall", [
            BoxFactory.horizontalList(form, "form-header", [
                // BoxFactory.label(form, "form-header-spacing", " "),
                BoxFactory.label(form, "form-header-label", "Form"),
                BoxFactory.text(form, "form-header-name", () => form.name, (value: string) => form.name = value)
            ]),
            BoxFactory.indent(form, "form-indent-fields", 2, this.createFormTable2(form))
        ])
    }

    private createFormTable2(form: Accenture_study_core_Form): Box {
        const proj = this.rootProjection;
        return GridUtil.createCollectionRowGrid<Accenture_study_core_Field>(
            form,
            "form-grid",
            "fields",
            form.fields,
            ["Title", "Name", "Widget", "Branch"],
            [attributeHeader, attributeHeader, attributeHeader, attributeHeader],
            [mycell, mycell, mycell, mycell],
            [
                (field: Accenture_study_core_Field) => { return PiProjectionUtil.textBox(field, "name"); },
                (field: Accenture_study_core_Field) => { return PiProjectionUtil.textBox(field, "optionalName"); },
                (field: Accenture_study_core_Field) => {
                        if (!!field.widget) {
                            return proj.getBox(field.widget);
                        } else {
                            return BoxFactory.alias(field, "Accenture_study_core_Field-widget", "[widget]", {
                                         propertyName: "widget"
                                    });
                        }
                    },
                (field: Accenture_study_core_Field) => {
                    if (!!field.branch) {
                        return proj.getBox(field.branch);
                    } else {
                        return BoxFactory.alias(field, "Accenture_study_core_Field-branch", "[branch]", {
                            propertyName: "branch"
                        });
                    }
                },
            ],
            "Accenture_study_core_Field",
            "<add field>",
            StudyEnvironment.getInstance().editor,
        );
    }


}

function isNumber(currentText: string, key: string, index: number): KeyPressAction {
    if (isNaN(Number(key))) {
        if (index === currentText.length) {
            return KeyPressAction.GOTO_NEXT;
        } else if (index === 0) {
            return KeyPressAction.GOTO_PREVIOUS;
        } else {
            return KeyPressAction.NOT_OK;
        }
    } else {
        return KeyPressAction.OK;
    }
}
