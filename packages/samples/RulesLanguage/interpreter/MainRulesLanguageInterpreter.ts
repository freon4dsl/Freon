// Generated by the ProjectIt Language Generator.
// Generated my Freon, will be overwritten with every generation.
import {
    ConceptFunction,
    FreonInterpreter,
    IMainInterpreter,
    InterpreterContext,
    InterpreterTracer, isRtError,
    MainInterpreter,
    OwningPropertyFunction,
    PiElement, RtError,
    RtObject
} from "@projectit/core";
import { RulesLanguageInterpreterInit } from "./gen/RulesLanguageInterpreterInit";

const getPropertyFunction: OwningPropertyFunction = (node: Object) => {
    const index = (node as PiElement).piOwnerDescriptor().propertyIndex;
    return (node as PiElement).piOwnerDescriptor().propertyName + (index !== undefined ? "[" + index + "]" : "");
};

/**
 * Function that returns the concept name for `node`.
 * Used by the interpreter to find which evaluator should be use for each node.
 */
const getConceptFunction: ConceptFunction = (node: Object) => {
    if (node === undefined) {
        return "";
    }
    return (node as PiElement).piLanguageConcept();
};

/**
 * The facade around the actual interpreter to avoid improper usage.
 * Sets the functions used to access the expression tree.
 * Ensures all internal interpreter state is cleaned when creating a new instance.
 */
export class MainRulesLanguageInterpreter implements FreonInterpreter {
    private static main: IMainInterpreter = null;

    constructor() {
        if (MainRulesLanguageInterpreter.main === null) {
            MainRulesLanguageInterpreter.main = MainInterpreter.instance(
                RulesLanguageInterpreterInit,
                getConceptFunction,
                getPropertyFunction
            );
        }
    }

    setTracing(value: boolean) {
        MainRulesLanguageInterpreter.main.setTracing(value);
    }

    getTrace(): InterpreterTracer {
        return MainRulesLanguageInterpreter.main.getTrace();
    }

    evaluate(node: Object): RtObject {
        MainRulesLanguageInterpreter.main.reset();
        try {
            return MainRulesLanguageInterpreter.main.evaluate(node, InterpreterContext.EMPTY_CONTEXT);
        } catch (e) {
            if (isRtError(e)) {
                return e;
            } else {
                return new RtError("[JavaScript error] " + e + "\n" + "Stacktrace: \n" + (e as Error)?.stack);
            }
        }
    }
}
