// Generated by the ProjectIt Language Generator.
// Generated my Freon, will be overwritten with every generation.
import {
    ConceptFunction,
    FreonInterpreter,
    IMainInterpreter,
    InterpreterContext,
    InterpreterTracer,
    MainInterpreter,
    OwningPropertyFunction,
    PiElement,
    RtObject,
    RtError,
    InitFunction,
} from "@projectit/core";
import { ExampleConceptFunction, ExampleInitFunction, ExampleOwningPropertyFunction, ExampleTracer, IExampleMainInterpreter } from "./ExampleInterpreterTypes";
import { ExampleInterpreterInit } from "./gen/ExampleInterpreterInit";

const getPropertyFunction: ExampleOwningPropertyFunction = (node: Object) => {
    const index = (node as PiElement).piOwnerDescriptor().propertyIndex;
    return (node as PiElement).piOwnerDescriptor().propertyName + (index !== undefined ? "[" + index + "]" : "");
};

/**
 * Function that returns the concept name for `node`.
 * Used by the interpreter to find which evaluator should be use for each node.
 */
const getConceptFunction: ExampleConceptFunction = (node: Object) => {
    if (node === undefined) {
        return "";
    }
    return (node as PiElement).piLanguageConcept();
};

/**
 * The facade around the actual interpreter to avoid improper usage.
 * Sets the functions used to access the expression tree.
 * Ensures all internal interpreter state is cleaned when creating a new instance.
 */
export class MainExampleInterpreter implements FreonInterpreter<PiElement, RtObject> {
    private static main: IExampleMainInterpreter = null;

    public constructor(init: ExampleInitFunction, getConceptFunction: ExampleConceptFunction, getPropertyFunction: ExampleOwningPropertyFunction) {
        MainExampleInterpreter.main = new MainInterpreter(init, getConceptFunction, getPropertyFunction);
    }

    // constructor() {
    //     // TODO Change singleton pattern
    //     if (MainExampleInterpreter.main === null) {
    //         MainExampleInterpreter.main = MainInterpreter.instance(ExampleInterpreterInit, getConceptFunction, getPropertyFunction);
    //     }
    // }

    setTracing(value: boolean) {
        MainExampleInterpreter.main.setTracing(value);
    }

    getTrace(): ExampleTracer {
        return MainExampleInterpreter.main.getTrace();
    }

    evaluate(node: PiElement): RtObject {
        MainExampleInterpreter.main.reset();
        try {
            return MainExampleInterpreter.main.evaluate(node, InterpreterContext.EMPTY_CONTEXT);
        } catch (e: any) {
            // TODO Runtime independent: how to?
            return new RtError(e.message);
        }
    }
}
