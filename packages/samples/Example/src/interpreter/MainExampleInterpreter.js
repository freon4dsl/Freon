"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MainExampleInterpreter = void 0;
// Generated by the Freon Language Generator.
// Generated my Freon, will be overwritten with every generation.
var core_1 = require("@freon4dsl/core");
var ExampleInterpreterInit_1 = require("./gen/ExampleInterpreterInit");
var getPropertyFunction = function (node) {
    var index = node.freOwnerDescriptor().propertyIndex;
    return node.freOwnerDescriptor().propertyName + (index !== undefined ? "[" + index + "]" : "");
};
/**
 * Function that returns the concept name for `node`.
 * Used by the interpreter to find which evaluator should be use for each node.
 */
var getConceptFunction = function (node) {
    if (node === undefined) {
        return "";
    }
    return node.freLanguageConcept();
};
/**
 * The facade around the actual interpreter to avoid improper usage.
 * Sets the functions used to access the expression tree.
 * Ensures all internal interpreter state is cleaned when creating a new instance.
 */
var MainExampleInterpreter = /** @class */ (function () {
    function MainExampleInterpreter() {
        if (MainExampleInterpreter.main === null) {
            MainExampleInterpreter.main = core_1.MainInterpreter.instance(ExampleInterpreterInit_1.ExampleInterpreterInit, getConceptFunction, getPropertyFunction);
        }
    }
    MainExampleInterpreter.prototype.setTracing = function (value) {
        MainExampleInterpreter.main.setTracing(value);
    };
    MainExampleInterpreter.prototype.getTrace = function () {
        return MainExampleInterpreter.main.getTrace();
    };
    MainExampleInterpreter.prototype.evaluate = function (node) {
        MainExampleInterpreter.main.reset();
        try {
            return MainExampleInterpreter.main.evaluate(node, core_1.InterpreterContext.EMPTY_CONTEXT);
        }
        catch (e) {
            return new core_1.RtError(e.message);
        }
    };
    MainExampleInterpreter.main = null;
    return MainExampleInterpreter;
}());
exports.MainExampleInterpreter = MainExampleInterpreter;
