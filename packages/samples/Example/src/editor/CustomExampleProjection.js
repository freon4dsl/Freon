"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomExampleProjection = void 0;
// Generated by the Freon Language Generator.
var core_1 = require("@freon4dsl/core");
var gen_1 = require("../language/gen/");
var ExampleEnvironment_1 = require("../config/gen/ExampleEnvironment");
var sumIcon = "M 6 5 L 6.406531 20.35309 L 194.7323 255.1056 L 4.31761 481.6469 L 3.767654 495.9135 L 373 494 C 376.606 448.306 386.512 401.054 395 356 L 383 353 C 371.817 378.228 363.867 405.207 340 421.958 C 313.834 440.322 279.304 438 249 438 L 79 438 L 252.2885 228.6811 L 96.04328 33.3622 L 187 32.99999 C 245.309 32.99999 328.257 18.91731 351.329 89.00002 C 355.273 100.98 358.007 113.421 359 126 L 372 126 L 362 5 L 6 5 L 6 5 L 6 5 L 6 5 L 6 5 z ";
var OPERATOR_COLUMN = 1;
var OPERAND_COLUMN = 2;
/**
 * Class CustomExampleProjection provides an entry point for the language engineer to
 * define custom build additions to the editor.
 * These custom build additions are merged with the default and definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */
var CustomExampleProjection = /** @class */ (function () {
    function CustomExampleProjection(name) {
        this.name = "manual";
        this.nodeTypeToBoxMethod = new Map([
            ["SumExpression", this.createSumBox],
            ["OrExpression", this.createOrBoxGrid],
            ["Documentation", this.createDocumentation]
        ]);
        this.nodeTypeToTableDefinition = new Map([]);
        if (!!name) {
            this.name = name;
        }
    }
    CustomExampleProjection.prototype.getTableHeadersFor = function (projectionName) {
        return null;
    };
    ////////////////////////////////////////////////////////////////////
    CustomExampleProjection.prototype.createDocumentation = function (doc) {
        return core_1.BoxFactory.horizontalLayout(doc, "Documentation-hlist-line-0", "", [
            core_1.BoxUtil.labelBox(doc, "doc start: ", "top-1-line-0-item-0"),
            // BoxUtil.textBox(this._element as Documentation, "text"),
            new core_1.MultiLineTextBox(doc, "exampleunit-documentation", function () { return doc.text; }, function (t) { doc.text = t; }),
            core_1.BoxUtil.labelBox(doc, ":end doc", "top-1-line-0-item-2")
        ], { selectable: false });
    };
    CustomExampleProjection.prototype.createSumBox = function (sum) {
        var cells = [
            new core_1.GridCellBox(sum, "Sum-from-cell", 3, 1, new core_1.HorizontalLayoutBox(sum, "Sum-from-part", [
                this.optionalPartBox(sum, "SumExpression-variable", "variable"),
                new core_1.LabelBox(sum, "sum-from-equals", "="),
                this.optionalPartBox(sum, "SumExpression-from", "from")
            ]), { columnSpan: 2,
                cssClass: "mycell"
            }),
            new core_1.GridCellBox(sum, "sum-icon-cell", 2, 1, new core_1.SvgBox(sum, "sum-icon", sumIcon, {
                viewPortWidth: 50,
                viewPortHeight: 50,
                viewBoxWidth: 500,
                viewBoxHeight: 500,
                selectable: false
            }), { cssClass: "mycell" }),
            new core_1.GridCellBox(sum, "sum-to-cell", 1, 1, this.optionalPartBox(sum, "SumExpression-to", "to"), { columnSpan: 2, cssClass: "mycell" }),
            new core_1.GridCellBox(sum, "sum-body-cell", 2, 2, new core_1.HorizontalListBox(sum, "", "sum-body", [
                new core_1.LabelBox(sum, "sum-body-open", "["),
                this.optionalPartBox(sum, "SumExpression-body", "body"),
                new core_1.LabelBox(sum, "sum-body-close", "]")
            ]), { cssClass: "mycell" })
        ];
        var result = new core_1.GridBox(sum, "sum-all", cells, {
            cssClass: "mygrid"
        });
        return (0, core_1.createDefaultExpressionBox)(sum, "sum-exp", [result]);
    };
    CustomExampleProjection.prototype.createOrBoxGrid = function (exp) {
        var gridCells = [];
        if (exp.left instanceof gen_1.OrExpression) {
            gridCells.push(new core_1.GridCellBox(exp, "or-Box2-cell", 1, OPERATOR_COLUMN, new core_1.LabelBox(exp, "or-Box2", function () { return "or"; }), { cssClass: "gridCellOr", rowSpan: 3 }), new core_1.GridCellBox(exp, "orBox3-cell", 1, OPERAND_COLUMN, this.optionalPartBox(exp.left, core_1.FRE_BINARY_EXPRESSION_LEFT, "left"), { cssClass: "or_gridcellFirst" }), new core_1.GridCellBox(exp, "or-Box4-cell", 2, OPERAND_COLUMN, this.optionalPartBox(exp.left, core_1.FRE_BINARY_EXPRESSION_RIGHT, "right"), { cssClass: "gridcell" }), new core_1.GridCellBox(exp, "or-Box5-cell", 3, OPERAND_COLUMN, this.optionalPartBox(exp, core_1.FRE_BINARY_EXPRESSION_RIGHT, "right"), { cssClass: "gridcellLast" }));
        }
        else {
            gridCells.push(new core_1.GridCellBox(exp, "or-Box6-cell", 1, OPERATOR_COLUMN, new core_1.LabelBox(exp, "or-Box3", function () { return "or"; }), { cssClass: "gridCellOr", rowSpan: 2 }), new core_1.GridCellBox(exp, "or-Box7-cell", 1, OPERAND_COLUMN, this.optionalPartBox(exp, core_1.FRE_BINARY_EXPRESSION_LEFT, "left"), { cssClass: "or_gridcellFirst" }), new core_1.GridCellBox(exp, "or-Box8-cell", 2, OPERAND_COLUMN, this.optionalPartBox(exp, core_1.FRE_BINARY_EXPRESSION_RIGHT, "right"), { cssClass: "gridcellLast" }));
        }
        return new core_1.GridBox(exp, "grid-or", gridCells, { cssClass: "grid" });
    };
    CustomExampleProjection.prototype.optionalPartBox = function (element, roleName, property) {
        // const projectionToUse = !!this.rootProjection ? this.rootProjection : this;
        // todo reimplement or rethink this
        return !!element[property]
            ? ExampleEnvironment_1.ExampleEnvironment.getInstance().editor.projection.getBox(element[property])
            : new core_1.ActionBox(element, roleName, "[" + property + "]", { propertyName: property, conceptName: core_1.FreLanguage.getInstance().classifier(element.freLanguageConcept()).properties.get(property).type });
    };
    return CustomExampleProjection;
}());
exports.CustomExampleProjection = CustomExampleProjection;
