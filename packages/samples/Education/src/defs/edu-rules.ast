language Education

modelunit FlowDescription {
    reference topic: Topic;
    rules: FlowRule[];
}

concept FlowRule {
    name: identifier;
    description: string;
    reference page: Page;
    transitions: PageTransition[];
}

concept PageTransition {
    condition: GradeLiteral;
    reference toPage: Page;
}

abstract expression RuleExpression { /* e.g. 3 mistakes => show A, 2 mistakes => show B, 1 mistake => show C */
    /* to be done */
}

concept Function {
    cases: FunctionCase[];
}

expression PageResult base RuleExpression {
    // RESULT OF CURRENT PAGE, no properties needed
}

expression GradeLiteral base LiteralExpression {
    reference grade: Grade;
}

concept FunctionCase {
    reference grade: Grade;
    formula: RuleExpression;
}

limited Grade {
    gradeA;
    gradeB;
    gradeC;
    gradeD;
    gradeE;
    gradeF;
}

expression QuestionRef base RuleExpression {
    reference question: Question;
}

expression NrOfCorrectAnswers base RuleExpression {
    /* This is a function that needs no properties */
}

///////////////////////////////////////
// Literals
///////////////////////////////////////
abstract expression LiteralExpression base RuleExpression {}

expression StringLiteralExpression base LiteralExpression {
    value: string;
}

expression FractionLiteralExpression base LiteralExpression {
    numerator: number;
    denominator: number;
}

expression NumberLiteralExpression base LiteralExpression   {
    value: number;
}

expression BooleanLiteralExpression base LiteralExpression {
    value: boolean;
}

////////////////////////////////////
//    Binary Expressions
////////////////////////////////////
abstract binary expression BinaryExpression base RuleExpression {
    left: RuleExpression;
    right: RuleExpression;
}

binary expression MultiplyExpression base BinaryExpression {
    priority = 8;
}

binary expression PlusExpression base BinaryExpression {
    priority = 4;
}

binary expression AndExpression base BinaryExpression {
    priority = 1;
}

binary expression OrExpression base BinaryExpression {
    priority = 1;
}

abstract binary expression ComparisonExpression base BinaryExpression {
}

binary expression LessThenExpression base ComparisonExpression {
    priority = 2;
}

binary expression GreaterThenExpression base ComparisonExpression {
    priority = 2;
}

binary expression EqualsExpression base ComparisonExpression {
    priority = 2;
}

interface Type {
    name: identifier;
}

limited PrimitiveType implements Type {
    name: identifier;
    String;
    Integer;
    Boolean;
    Fraction;
    AGrade;
    ANY;
}
