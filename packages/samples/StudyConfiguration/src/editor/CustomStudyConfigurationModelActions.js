"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MANUAL_CUSTOM_ACTIONS = exports.MANUAL_BINARY_EXPRESSION_ACTIONS = exports.CustomStudyConfigurationModelActions = void 0;
// Generated by the Freon Language Generator.
var core_1 = require("@freon4dsl/core");
var core_2 = require("@freon4dsl/core");
var NumberLiteralExpression_1 = require("../language/gen/NumberLiteralExpression");
/**
 * Class CustomStudyConfigurationModelActions provides an entry point for the language engineer to
 * define custom build additions to the editor.
 * These custom build additions are merged with the default and definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */
var CustomStudyConfigurationModelActions = /** @class */ (function () {
    function CustomStudyConfigurationModelActions() {
        this.binaryExpressionActions = exports.MANUAL_BINARY_EXPRESSION_ACTIONS;
        this.customActions = exports.MANUAL_CUSTOM_ACTIONS;
    }
    return CustomStudyConfigurationModelActions;
}());
exports.CustomStudyConfigurationModelActions = CustomStudyConfigurationModelActions;
exports.MANUAL_BINARY_EXPRESSION_ACTIONS = [
// Add your own custom binary expression actions here
];
exports.MANUAL_CUSTOM_ACTIONS = [
    // Add your own custom behavior here
    core_1.FreCustomAction.create({
        activeInBoxRoles: [
            "Method-body",
            "AbsExpression-expr",
            "SumExpression-from",
            "SumExpression-to",
            "SumExpression-body",
            "IfExpression-condition",
            "IfExpression-whenTrue",
            "IfExpression-whenFalse",
            "FreBinaryExpression-left",
            "FreBinaryExpression-right",
            "MultiplyExpression-left",
            "MultiplyExpression-right",
            "PlusExpression-left",
            "PlusExpression-right",
            "DivideExpression-left",
            "DivideExpression-right",
            "AndExpression-left",
            "AndExpression-right",
            "OrExpression-left",
            "OrExpression-right",
            "ComparisonExpression-left",
            "ComparisonExpression-right",
            "LessThenExpression-left",
            "LessThenExpression-right",
            "GreaterThenExpression-left",
            "GreaterThenExpression-right",
            "EqualsExpression-left",
            "EqualsExpression-right",
            "Day-startDay",
            "When-startWhen"
        ],
        trigger: /[0-9]/,
        action: function (box, trigger, editor) {
            var parent = box.element;
            var x = new NumberLiteralExpression_1.NumberLiteralExpression();
            if ((0, core_1.isString)(trigger)) {
                x.value = Number.parseInt(trigger.toString());
            }
            parent[box.propertyName] = x;
            return x;
        },
        boxRoleToSelect: core_2.RoleProvider.property("NumberLiteralExpression", "value", "numberbox"),
        caretPosition: core_1.FreCaret.RIGHT_MOST
    })
];
