// Generated by the Freon Language Generator.
import { FreNode, Box, GridCellBox, LabelBox, IconBox, GridBox, createDefaultExpressionBox, ActionBox, FreLanguage,
    FRE_BINARY_EXPRESSION_LEFT, FRE_BINARY_EXPRESSION_RIGHT,
    HorizontalListBox, FreProjection, FreProjectionHandler, FreTableDefinition, TableRowBox, HorizontalLayoutBox, MultiLineTextBox, BoxFactory, BoxUtil, BoolDisplay
} from "@freon4dsl/core";
import { StudyConfiguration, Description, Period, Event, EventSchedule } from "../language/gen";
import { faGripVertical } from '@fortawesome/free-solid-svg-icons';

/**
 * Class CustomStudyConfigurationModelProjection provides an entry point for the language engineer to
 * define custom build additions to the editor.
 * These are merged with the custom build additions and other definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on one of the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */
export class CustomStudyConfigurationModelProjection implements FreProjection {
    name: string = "Manual";
    handler: FreProjectionHandler;
    nodeTypeToBoxMethod: Map<string, (node: FreNode) => Box> = new Map<string, (node: FreNode) => Box>([
        ["StudyConfiguration", this.createStudyConfiguration],
        ["Description", this.createDescription],
        ["Period", this.createPeriod],
        ["Event", this.createEvent],
        ["EventSchedule", this.createSchedule]
    ]);

    nodeTypeToTableDefinition: Map<string, () => FreTableDefinition> = new Map<string, () => FreTableDefinition>([
        // register your custom table definition methods here
        // ['NAME_OF_CONCEPT', this.TABLE_DEFINITION_FOR_CONCEPT],
    ]);

    getTableHeadersFor(projectionName: string): TableRowBox {
        return null;
    }

    ////////////////////////////////////////////////////////////////////
    createStudyConfiguration (element: StudyConfiguration): Box {
        return BoxFactory.verticalLayout(element, "StudyConfiguration-overall", "", [
            BoxUtil.emptyLineBox(element, "StudyConfiguration-empty-line-0"),
            BoxFactory.horizontalLayout(element, "StudyConfiguration-hlist-line-1", "", "center",
                [
                    BoxUtil.labelBox(element, "STUDY NAME:", "top-1-line-1-item-0"),
                    BoxUtil.textBox(element, "name"),
                ],
                { selectable: false },
            ),
            BoxUtil.indentBox(element, 4, true, "3",
                BoxUtil.labelBox(element, "Options:", "top-1-line-3-item-0"),
            ),
            BoxUtil.indentBox( element, 8, true, "4",
                BoxFactory.horizontalLayout(element, "StudyConfiguration-hlist-line-4", "", "center",
                    [
                        BoxUtil.booleanBox(element, "showActivityDetails", { yes: "YES", no: "NO" }, BoolDisplay.CHECKBOX),
                        BoxUtil.labelBox(element, "Show Task Details", "top-1-line-4-item-1"),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.indentBox(element, 8, true, "5",
                BoxFactory.horizontalLayout(element, "StudyConfiguration-hlist-line-5", "","center",
                    [
                        BoxUtil.booleanBox(element, "showSystems", { yes: "YES", no: "NO" }, BoolDisplay.CHECKBOX),
                        BoxUtil.labelBox(element, "Show Systems", "top-1-line-5-item-1"),
                    ],
                    { selectable: false },
                ),
            ),
            BoxUtil.emptyLineBox(element, "StudyConfiguration-empty-line-6"),
            BoxUtil.groupBox(element, "STUDY PERIODS", 0, "study-periods-group",
                BoxUtil.indentBox(element, 4, true, "9",
                    BoxUtil.verticalPartListBox(element, (element).periods, "periods", null, this.handler)
                )
            ),
            BoxUtil.emptyLineBox(element, "StudyConfiguration-empty-line-10"),
            BoxUtil.groupBox(element, "TASK DETAILS", 0, "task-details-group",
                BoxUtil.indentBox(element, 4, true, "13",
                    BoxUtil.verticalPartListBox(element, (element).taskDetails, "taskDetails", null, this.handler)
                )
            ),
            BoxUtil.emptyLineBox(element, "StudyConfiguration-empty-line-14"),
            BoxUtil.groupBox(element, "SYSTEM ACCESS DEFINITIONS", 0, "sys-defs-group",
                BoxUtil.indentBox(element, 4, true, "17",
                    BoxUtil.verticalPartListBox(element, (element).systemAccesses, "systemAccesses", null,  this.handler)
                )
            ),
            BoxUtil.emptyLineBox(element, "StudyConfiguration-empty-line-18"),
            BoxUtil.groupBox(element, "STAFFING", 0, "staffing-group",
                BoxUtil.indentBox(element, 4, true, "21",
                    BoxUtil.getBoxOrAction(element, "staffing", "Staffing", this.handler)
                )
            )
        ]);
    }

    // createDescription (desc: Description): Box {
    //     return BoxFactory.horizontalLayout(desc, "Description-hlist-line-0", "","top",
    //         [
    //             new MultiLineTextBox(desc, "study-part-description", () => { return desc.text}, (t: string) => { desc.text = t})
    //         ],
    //         { selectable: false }
    //     );
    // }

    createDescription (desc: Description): Box {
        return new MultiLineTextBox(desc, "study-part-description", () => { return desc.text}, (t: string) => { desc.text = t});
    }

    createPeriod (period: Period): Box {
        return BoxFactory.verticalLayout(period, "Period-overall", "", [
            BoxFactory.horizontalLayout(period, "Period-hlist-line-0", "", "center",
                [
                    new IconBox(period, "draggrip", faGripVertical, "grab"),
                    BoxUtil.labelBox(period, "Period:", "top-1-line-0-item-1"),
                    BoxUtil.textBox(period, "name")                   
                ],
                { selectable: false }
            ),
            BoxUtil.indentBox(period, 1.5, true, "e1",
                BoxFactory.verticalLayout(period, "Period-detail", "", [
                    BoxFactory.horizontalLayout(period, "Period-hlist-line-1", "","top",
                        [
                            BoxUtil.labelBox(period, "Description:", "top-1-line-2-item-0"),
                            BoxUtil.getBoxOrAction(period, "description", "Description", this.handler)
                        ],
                        { selectable: false }
                    ),
                    BoxUtil.groupBox(period, "EVENTS", 0, "group-1-line-2-item-0",
                        BoxUtil.indentBox(period, 4, true, "4",
                            BoxUtil.verticalPartListBox(period, period.events, "events", null, this.handler)
                        ) 
                    )
                ])
            )
        ]);
    }

    createEvent (event: Event): Box {
        return BoxFactory.verticalLayout(event, "Event-overall", "", [
            BoxFactory.horizontalLayout(event, "Event-hlist-line-0", "","center",
                [
                    new IconBox(event, "draggrip", faGripVertical, "grab"),
                    BoxUtil.labelBox(event, "Event:", "top-1-line-0-item-1"),
                    BoxUtil.textBox(event, "name")
                ],
               { selectable: false }
            ),
            BoxUtil.indentBox(event, 1.5, true, "e1",
                BoxFactory.verticalLayout(event, "Event-detail", "", [
                    BoxFactory.horizontalLayout(event, "Event-hlist-line-2", "","top",
                        [
                            BoxUtil.labelBox(event, "Description:", "top-1-line-2-item-0"),
                            BoxUtil.getBoxOrAction(event, "description", "Description", this.handler)
                        ],
                        { selectable: false }
                    ),
                    BoxUtil.labelBox(event, "Schedule:", "top-1-line-4-item-0"),
                    BoxUtil.indentBox(event, 2, true, "e11",
                        BoxUtil.getBoxOrAction(event, "schedule", "EventSchedule", this.handler)
                    ),
                    BoxFactory.horizontalLayout(event, "Event-hlist-line-9", "", "top",
                        [
                            BoxUtil.labelBox(event, "Checklist:", "top-1-line-9-item-0"),
                            BoxUtil.booleanBox(event, "showSequenced", { yes: "YES", no: "NO" },BoolDisplay.CHECKBOX),
                            BoxUtil.labelBox(event, "Allow Sequencing", "top-1-line-9-item-2")
                        ],
                        { selectable: false }
                    ),
                    BoxUtil.indentBox(event, 2, true, "e12",
                        BoxUtil.getBoxOrAction(event, "checkList", "CheckList", this.handler)
                    ),
                    BoxUtil.emptyLineBox(event, "Event-empty-line-11")
                ])
            )
        ]);
    }

    createSchedule (schedule: EventSchedule): Box {
        return BoxFactory.verticalLayout(schedule, "EventSchedule-overall", "", [
            BoxFactory.horizontalLayout(schedule, "EventSchedule-hlist-line-0", "", "center",
                [
                    BoxUtil.labelBox(schedule, "First Scheduled:", "top-1-line-0-item-0"),
                    BoxUtil.getBoxOrAction(schedule, "eventStart", "EventStart", this.handler),
                ],
                { selectable: false },
            ),
            BoxFactory.horizontalLayout(schedule, "EventSchedule-hlist-line-1", "", "top",
                [
                    BoxUtil.labelBox(schedule, "Then Repeats:", "top-1-line-1-item-0"),
                    BoxUtil.getBoxOrAction(schedule, "eventRepeat", "RepeatExpression", this.handler),
                ],
                { selectable: false },
            ),
            BoxFactory.horizontalLayout(schedule, "EventSchedule-hlist-line-2", "", "top",
                [
                    BoxUtil.labelBox(schedule, "Window:", "top-1-line-2-item-0"),
                    BoxUtil.getBoxOrAction(schedule, "eventWindow", "EventWindow", this.handler),
                ],
                { selectable: false },
            ),
            BoxFactory.horizontalLayout(schedule, "EventSchedule-hlist-line-3", "", "center",
                [
                    BoxUtil.labelBox(schedule, "Time of Day:", "top-1-line-3-item-0"),
                    BoxUtil.getBoxOrAction(schedule, "eventTimeOfDay", "EventTimeOfDay", this.handler),
                ],
                { selectable: false },
            ),
        ]);
    }
 }
