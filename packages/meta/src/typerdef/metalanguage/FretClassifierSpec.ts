// Generated by the Freon Language Generator.

import { FretTypeRule } from "./FretTypeRule";
import { FreMetaClassifier, MetaElementReference } from "../../languagedef/metalanguage";
import { TyperDef } from "./TyperDef";
import { FreTyperElement } from "./FreTyperElement";

/**
 * Class FretClassifierSpec is the implementation of the concept with the same name in the language definition file.
 */
export class FretClassifierSpec extends FreTyperElement {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data
     */
    static create(data: Partial<FretClassifierSpec>): FretClassifierSpec {
        const result = new FretClassifierSpec();
        if (!!data.rules) {
            data.rules.forEach(x => result.rules.push(x));
        }
        if (!!data.$myClassifier) {
            result.$myClassifier = data.$myClassifier;
        }
        if (data.aglParseLocation) {
            result.aglParseLocation = data.aglParseLocation;
        }
        return result;
    }
    owner: TyperDef;

    readonly $typename: string = "FretClassifierSpec"; // holds the metatype in the form of a string
    $id: string = ''; // a unique identifier

    rules: FretTypeRule[] = []; // implementation of part 'rules'
    $myClassifier: MetaElementReference<FreMetaClassifier>; // implementation of reference 'myClassifier'

    /**
     * Convenience method for reference 'myClassifier'.
     * Instead of returning a 'MetaElementReference<FreClassifier>' object,
     * it returns the referred 'FreClassifier' object, if it can be found.
     */
    get myClassifier(): FreMetaClassifier {
        if (!!this.$myClassifier) {
            return this.$myClassifier.referred;
        }
        return null;
    }
    toFreString(): string {
        return this.$myClassifier.name + " {\n\t" + this.rules.map(r => r.toFreString()).join("\n\t") + "\n} ";
    }
}
