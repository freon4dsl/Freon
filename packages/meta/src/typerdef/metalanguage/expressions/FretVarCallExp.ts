// Generated by the Freon Language Generator.
import { FretExp } from "./FretExp.js";
import { MetaElementReference } from "../../../languagedef/metalanguage/index.js";
import { FretVarDecl } from "../FretVarDecl.js";

/**
 * Class FretVarCallExp is the implementation of the concept with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to any changes in the state of its properties.
 */
export class FretVarCallExp extends FretExp {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data
     */
    static create(data: Partial<FretVarCallExp>): FretVarCallExp {
        const result = new FretVarCallExp();
        if (!!data.$variable) {
            result.$variable = data.$variable;
        }
        return result;
    }

    readonly $typename: string = "FretVarCallExp"; // holds the metatype in the form of a string
    // @ts-ignore Property is set during parsing and checking phases
    $variable: MetaElementReference<FretVarDecl>; // implementation of reference 'variable'

    /**
     * Convenience method for reference 'variable'.
     * Instead of returning a 'MetaElementReference<FretVarDecl>' object,
     * it returns the referred 'FretVarDecl' object, if it can be found.
     */
    get variable(): FretVarDecl | undefined {
        if (!!this.$variable) {
            return this.$variable.referred;
        }
        return undefined;
    }

    set variable(newOne: FretVarDecl) {
        if (!!newOne) {
            this.$variable = MetaElementReference.create<FretVarDecl>(newOne, "FretVarDecl");
            // this.__variable.owner = this;
        }
    }

    toFreString(): string {
        return this.$variable.name;
    }

    baseSource(): FretExp {
        return this;
    }
}
