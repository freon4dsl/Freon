// Generated by the Freon Language Generator.

import { FreMetaClassifier, MetaElementReference } from "../../languagedef/metalanguage";
import { FretWhereExp } from "./expressions";
import { FreTyperElement } from "./FreTyperElement";

/**
 * Class FretVarDecl is the implementation of the concept with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to any changes in the state of its properties.
 */
export class FretVarDecl extends FreTyperElement {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data
     */
    static create(data: Partial<FretVarDecl>): FretVarDecl {
        const result = new FretVarDecl();
        if (!!data.name) {
            result.name = data.name;
        }
        if (!!data.$type) {
            result.$type = data.$type;
        }
        if (data.aglParseLocation) {
            result.aglParseLocation = data.aglParseLocation;
        }
        return result;
    }
    // @ts-ignore Property is set during parsing and checking phases
    owner: FretWhereExp;

    readonly $typename: string = "FretVarDecl"; // holds the metatype in the form of a string

    // @ts-ignore Property is set during parsing and checking phases
    $type: MetaElementReference<FreMetaClassifier>; // implementation of reference 'type'

    /**
     * Convenience method for reference 'type'.
     * Instead of returning a 'MetaElementReference<FreClassifier>' object,
     * it returns the referred 'FreClassifier' object, if it can be found.
     */
    get type(): FreMetaClassifier | undefined {
        if (!!this.$type) {
            return this.$type.referred;
        }
        return undefined;
    }

    set type(newOne: FreMetaClassifier) {
        if (!!newOne) {
            this.$type = MetaElementReference.create<FreMetaClassifier>(newOne, "FreClassifier");
            this.$type.owner = this;
        }
    }

    toFreString(): string {
        return this.name + " : " + this.$type.name;
    }
}
